;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 05.08.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;#define SBR(port, bit)        port |= (1<<bit)
;#define CBR(port, bit)        port &= (~(1<<bit))
;#define INV(port, bit)        port ^= (1<<bit)
;#define SBRC(port, bit)      ((port & (1<<bit)) == 0)
;#define SBRS(port, bit)      ((port & (1<<bit)) != 0)
;
;#define  LIGHT_LCD           PORTB.2
;
;#define START_ADC            SBR(ADCSRA, 6)
;
;/*BUTTONS ADC VALUE****************************
;UP                   98
;DOWN                 253
;RIGHT                0
;LEFT                 406
;SELECT               638
; */
;
;#define UP_PRESS_STATE       0
;#define DOWN_PRESS_STATE     1
;#define RIGHT_PRESS_STATE    2
;#define LEFT_PRESS_STATE     3
;#define SELECT_PRESS_STATE   4
;
;#define TAHO_PIN             !PINC.5
;#define PERIOD               1000*DIV // ms
;#define DIV                  10      // ( 1000/timer IRQ period )
;
;#define STOP_TAH_STATE       0
;#define UP_STATE             1
;
;unsigned int
;adc_data,
;cnt;
;
;unsigned char
;but_state,
;state,
;array[16];
;
;void tah(unsigned int period);
;
;/*********************************************************
; >INTERRUPT ROUT          ADC
;*********************************************************/
;interrupt [ADC_INT] void adc_isr(void)
; 0000 004B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004C  adc_data = ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004D 
; 0000 004E  if(adc_data > 50 && adc_data < 200)  SBR(but_state, UP_PRESS_STATE);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004F  if(adc_data > 200 && adc_data < 300) SBR(but_state, DOWN_PRESS_STATE);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0050  if(!adc_data || adc_data < 50)       SBR(but_state, RIGHT_PRESS_STATE);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0051  if(adc_data > 300 && adc_data < 500) SBR(but_state, LEFT_PRESS_STATE);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0052  if(adc_data > 500 && adc_data < 700) SBR(but_state, SELECT_PRESS_STATE);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0053 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;/*********************************************************
; >INTERRUPT ROUT          TIMER 100us
;*********************************************************/
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0059 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005A TCNT0=0x38;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005B 
; 0000 005C tah(PERIOD);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005D }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;void init_dev()
; 0000 0060 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0061 #pragma optsize-
; 0000 0062 CLKPR=(1<<CLKPCE);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0063 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0064 #ifdef _OPTIMIZE_SIZE_
; 0000 0065 #pragma optsize+
; 0000 0066 #endif
; 0000 0067 
; 0000 0068 // Input/Output Ports initialization
; 0000 0069 // Port B initialization
; 0000 006A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006B DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006E 
; 0000 006F // Port C initialization
; 0000 0070 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0071 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0072 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0073 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (0<<PORTC0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0074 
; 0000 0075 // Port D initialization
; 0000 0076 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0077 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0078 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0079 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 0 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: 16000,000 kHz
; 0000 007E // Mode: Normal top=0xFF
; 0000 007F // OC0A output: Disconnected
; 0000 0080 // OC0B output: Disconnected
; 0000 0081 // Timer Period: 0,01 ms
; 0000 0082 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0083 TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0084 TCNT0=0x38;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0085 OCR0A=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0086 OCR0B=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0087 
; 0000 0088 // Timer/Counter 1 initialization
; 0000 0089 // Clock source: System Clock
; 0000 008A // Clock value: Timer1 Stopped
; 0000 008B // Mode: Normal top=0xFFFF
; 0000 008C // OC1A output: Disconnected
; 0000 008D // OC1B output: Disconnected
; 0000 008E // Noise Canceler: Off
; 0000 008F // Input Capture on Falling Edge
; 0000 0090 // Timer1 Overflow Interrupt: Off
; 0000 0091 // Input Capture Interrupt: Off
; 0000 0092 // Compare A Match Interrupt: Off
; 0000 0093 // Compare B Match Interrupt: Off
; 0000 0094 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0095 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0096 TCNT1H=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0097 TCNT1L=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0098 ICR1H=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0099 ICR1L=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009A OCR1AH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 009B OCR1AL=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009C OCR1BH=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009D OCR1BL=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 2 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: 15,625 kHz
; 0000 00A2 // Mode: Normal top=0xFF
; 0000 00A3 // OC2A output: Disconnected
; 0000 00A4 // OC2B output: Disconnected
; 0000 00A5 // Timer Period: 9,984 ms
; 0000 00A6 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A7 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A8 TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A9 TCNT2=0x64;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AA OCR2A=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AB OCR2B=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AC 
; 0000 00AD // Timer/Counter 0 Interrupt(s) initialization
; 0000 00AE TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AF 
; 0000 00B0 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00B1 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B2 
; 0000 00B3 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00B4 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B5 
; 0000 00B6 // External Interrupt(s) initialization
; 0000 00B7 // INT0: Off
; 0000 00B8 // INT1: Off
; 0000 00B9 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00BA // Interrupt on any change on pins PCINT8-14: Off
; 0000 00BB // Interrupt on any change on pins PCINT16-23: Off
; 0000 00BC EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00BD EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BE PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00BF 
; 0000 00C0 // USART initialization
; 0000 00C1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C2 // USART Receiver: Off
; 0000 00C3 // USART Transmitter: On
; 0000 00C4 // USART0 Mode: Asynchronous
; 0000 00C5 // USART Baud Rate: 9600
; 0000 00C6 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C7 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00C8 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00C9 UBRR0H=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CA UBRR0L=0x67;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00CB 
; 0000 00CC // Analog Comparator initialization
; 0000 00CD // Analog Comparator: Off
; 0000 00CE // The Analog Comparator's positive input is
; 0000 00CF // connected to the AIN0 pin
; 0000 00D0 // The Analog Comparator's negative input is
; 0000 00D1 // connected to the AIN1 pin
; 0000 00D2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D3 // Digital input buffer on AIN0: On
; 0000 00D4 // Digital input buffer on AIN1: On
; 0000 00D5 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D6 
; 0000 00D7 // ADC initialization
; 0000 00D8 // ADC Clock frequency: 125,000 kHz
; 0000 00D9 // ADC Voltage Reference: AVCC pin
; 0000 00DA // ADC Auto Trigger Source: ADC Stopped
; 0000 00DB // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
; 0000 00DC // ADC4: On, ADC5: On
; 0000 00DD #define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
; 0000 00DE DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00DF ADMUX=ADC_VREF_TYPE;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E0 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E1 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E2 
; 0000 00E3 // SPI initialization
; 0000 00E4 // SPI Type: Master
; 0000 00E5 // SPI Clock Rate: 2*4000,000 kHz
; 0000 00E6 // SPI Clock Phase: Cycle Start
; 0000 00E7 // SPI Clock Polarity: Low
; 0000 00E8 // SPI Data Order: MSB First
; 0000 00E9 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00EA SPSR=(1<<SPI2X);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00EB 
; 0000 00EC // TWI initialization
; 0000 00ED // TWI disabled
; 0000 00EE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00EF 
; 0000 00F0 // Bit-Banged I2C Bus initialization
; 0000 00F1 // I2C Port: PORTC
; 0000 00F2 // I2C SDA bit: 4
; 0000 00F3 // I2C SCL bit: 5
; 0000 00F4 // Bit Rate: 100 kHz
; 0000 00F5 // Note: I2C settings are specified in the
; 0000 00F6 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00F7 
; 0000 00F8 // Alphanumeric LCD initialization
; 0000 00F9 // Connections are specified in the
; 0000 00FA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00FB // RS - PORTB Bit 0
; 0000 00FC // RD - PORTB Bit 7
; 0000 00FD // EN - PORTB Bit 1
; 0000 00FE // D4 - PORTD Bit 4
; 0000 00FF // D5 - PORTD Bit 5
; 0000 0100 // D6 - PORTD Bit 6
; 0000 0101 // D7 - PORTD Bit 7
; 0000 0102 // Characters/line: 16
; 0000 0103 lcd_init(16);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0104 
; 0000 0105 // Global enable interrupts
; 0000 0106 
; 0000 0107 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;void but_rout()
; 0000 010A {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 010B unsigned char tmp = but_state;
; 0000 010C 
; 0000 010D if(SBRS(but_state, UP_PRESS_STATE))
;PCODE: $000000CA VOL: 0
;	tmp -> R17
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 010E   {
; 0000 010F    lcd_clear();
;PCODE: $000000D0 VOL: 0
; 0000 0110    lcd_puts("UP");
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0111    CBR(but_state, UP_PRESS_STATE);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0112   }
; 0000 0113 
; 0000 0114 if(SBRS(but_state, DOWN_PRESS_STATE))
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0115   {
; 0000 0116    lcd_clear();
;PCODE: $000000DB VOL: 0
; 0000 0117    lcd_puts("DOWN");
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0118    CBR(but_state, DOWN_PRESS_STATE);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0119   }
; 0000 011A 
; 0000 011B if(SBRS(but_state, LEFT_PRESS_STATE))
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 011C   {
; 0000 011D    lcd_clear();
;PCODE: $000000E6 VOL: 0
; 0000 011E    lcd_puts("LEFT");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 011F    CBR(but_state, LEFT_PRESS_STATE);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0120   }
; 0000 0121 
; 0000 0122 if(SBRS(but_state, RIGHT_PRESS_STATE))
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0123   {
; 0000 0124    lcd_clear();
;PCODE: $000000F1 VOL: 0
; 0000 0125    lcd_puts("RIGHT");
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0126    CBR(but_state, RIGHT_PRESS_STATE);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0127   }
; 0000 0128 
; 0000 0129 if(SBRS(but_state, SELECT_PRESS_STATE))
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 012A   {
; 0000 012B    lcd_clear();
;PCODE: $000000FC VOL: 0
; 0000 012C    lcd_puts("SELECT");
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 012D    CBR(but_state, SELECT_PRESS_STATE);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 012E   }
; 0000 012F 
; 0000 0130 lcd_gotoxy(0, 1);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0131 sprintf(array, "adc=%d, 0x%X", adc_data, tmp);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0132 lcd_puts(array);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0133 }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0

	.DSEG
_0x13:
	.BYTE 0x1A
;
;void tah(unsigned int period)
; 0000 0136 {

	.CSEG
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0137 static unsigned int
; 0000 0138 tah_cnt;
; 0000 0139 
; 0000 013A /*========================================================
; 0000 013B                     TAHO ROUT
; 0000 013C =========================================================*/
; 0000 013D     if(SBRC(state, STOP_TAH_STATE))
;PCODE: $0000011E VOL: 0
;	period -> Y+0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 013E     {
; 0000 013F         if(TAHO_PIN)
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0140             SBR(state, UP_STATE);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0141         else
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0142         {
; 0000 0143             if(SBRS(state, UP_STATE))
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0144             {
; 0000 0145                 cnt++;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0146                 CBR(state, UP_STATE);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0147             }
; 0000 0148         }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0149 
; 0000 014A         tah_cnt++;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 014B 
; 0000 014C         if(tah_cnt == period)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 014D         {
; 0000 014E             tah_cnt = 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 014F 
; 0000 0150             SBR(state, STOP_TAH_STATE);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0151         }
; 0000 0152     }
;PCODE: $00000142 VOL: 0
; 0000 0153 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;
;void main(void)
; 0000 0156 {
;PCODE: $00000147 VOL: 0
; 0000 0157  init_dev();
;PCODE: $00000148 VOL: 0
; 0000 0158  #asm("sei")
;PCODE: $00000149 VOL: 0
	sei
;PCODE: $0000014A VOL: 0
; 0000 0159  LIGHT_LCD = 0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 015A  lcd_puts("Working...");
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 015B  delay_ms(1000);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 015C  lcd_clear();
;PCODE: $00000152 VOL: 0
; 0000 015D 
; 0000 015E while (1)
;PCODE: $00000153 VOL: 0
; 0000 015F       {
; 0000 0160        //delay_ms(300);
; 0000 0161        //but_rout();
; 0000 0162        //START_ADC;
; 0000 0163 
; 0000 0164             if(SBRS(state, STOP_TAH_STATE))
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0165             {
; 0000 0166                 lcd_clear();
;PCODE: $00000157 VOL: 0
; 0000 0167                 lcd_gotoxy(0, 0);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0168                 sprintf(array, "cnt = %d;", cnt);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0169                 cnt = 0;
;PCODE: $00000168 VOL: 0
; 0000 016A                 lcd_puts(array);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 016B                 CBR(state, STOP_TAH_STATE);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 016C             }
; 0000 016D       }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 016E }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0

	.DSEG
_0x1F:
	.BYTE 0xB
